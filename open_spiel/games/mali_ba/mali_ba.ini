[GameSettings]
NumPlayers = 3
; Use -1 for random seed based on time, or a specific integer
RngSeed = -1 
; Comma-separated, no spaces around commas
PlayerColors = Red,Green,Blue 
LogFile = /tmp/mali_ba.log
LoggingEnabled = true
enable_move_logging = false

[PythonUISettings]
ScreenWidth = 1280
ScreenHeight = 800
# Background map settings
BackgroundMap = /home/robp/Downloads/mali_ba_map.png
# Alternative: BackgroundMap = /full/path/to/your/map.png
# Transparency: 0-255, where 0 is fully transparent, 255 is opaque
HexTransparency = 128

[Board]
# Grid radius for regular hexagonal board (if not using custom_hexes)
grid_radius = 4
# Hexes that are considered to be the coastline
; Removed these to leave just the Southern coast -4,-1,5:-5,2,3:-5,0,5:-5,1,4:
coastal_hexes = -5,3,2:-5,4,1:-4,4,0:-3,4,-1:-3,5,-2:-2,5,-3:-1,5,-4:0,4,-4:1,4,-5:2,3,-5:3,2,-5:4,2,-6:5,2,-7:
# Custom hexes for regions 1. Desert West, 2. Desert Center, 3. Sahel West, 4. Sahel Center, 5. Coastal West, 6. Coastal Center
custom_hexes1 = -5,0,5:-4,0,4:-4,-1,5:-3,-1,4:-2,-1,3:-3,-2,5:-2,-2,4:-1,-2,3:0,-2,2:
custom_hexes2 = 0,-3,3:1,-3,2:2,-3,1:2,-4,2:3,-4,1:4,-4,0:5,-4,-1:4,-5,1:5,-5,0:
custom_hexes3 = -5,3,2:-4,3,1:-5,2,3:-4,2,2:-3,2,1:-2,2,0:-5,1,4:-4,1,3:-3,1,2:-2,1,1:-1,1,0:0,1,-1:-3,0,3:-2,0,2:-1,0,1:0,0,0:-1,-1,2:0,-1,1:
custom_hexes4 = 1,0,-1:2,0,-2:1,-1,0:2,-1,-1:1,-2,1:2,-2,0:3,-2,-1:4,-2,-2:5,-2,-3:3,-3,0:4,-3,-1:5,-3,-2:
custom_hexes5 = -3,5,-2:-2,5,-3:-1,5,-4:-5,4,1:-4,4,0:-3,4,-1:-2,4,-2:-1,4,-3:0,4,-4:-3,3,0:-2,3,-1:-1,3,-2:0,3,-3:-1,2,-1:0,2,-2:
custom_hexes6 = 1,4,-5:1,3,-4:2,3,-5:1,2,-3:2,2,-4:3,2,-5:4,2,-6:5,2,-7:1,1,-2:2,1,-3:3,1,-4:4,1,-5:5,1,-6:3,0,-3:4,0,-4:5,0,-5:3,-1,-2:4,-1,-3:5,-1,-4:

[Regions]
# Define names for the custom hex regions.
# The number after 'region' should match the number in 'custom_hexesX' in the [Board] section.
# If there are no regions in the map, you can just have all the hexes be in region1
region1 = Desert West
region2 = Desert Center
region3 = Sahel West
region4 = Sahel Center
region5 = Coastal West
region6 = Coastal Center

[Cities]
# Custom city placement (optional) - format: name,culture,x,y,z,common_good,rare_good
# If not specified, uses default placement with Timbuktu at (0,0,0)
# 
# Uncomment and modify the lines below to use custom city placement:
;city1 = Timbuktu,0,0,0
;city2 = Ségou,1,-1,0
;city3 = Ouagadougou,-1,1,0
;city4 = Agadez,0,1,-1

city1 = Timbuktu,1,-2,1
city2 = Ségou,-1,2,-1
city3 = Ouagadougou,2,1,-3
city4 = Agadez,5,-4,-1
city5 = Katsina,5,-1,-4
city6 = Oyo,4,1,-5
city7 = Sikasso,0,2,-2
city8 = Warri,5,2,-7
city9 = Oudane,-3,-1,4
city10 = Linguère,-4,1,3
city11 = Hemang,2,3,-5
city12 = Dinguiraye,-3,4,-1
city13 = Dosso,4,-1,-3
city14 = Bandiagara,1,0,-1
city15 = Tabou,-1,5,-4

# Note: 
# - Hex coordinates must satisfy x + y + z = 0
# - City names should match those in the game's city database for proper ID assignment
# - If a city name is not found, it will be assigned a new ID automatically

# City Names & IDs
# NOTE: THIS NEEDS TO BE MAINTAINED TO MATCH CONFIG.PY AND MALI_BA_COMMON.H
; Each city belongs to a cultural group and produces specific rare and common trade goods;
; CITY_DATA = [
;     (1, "Agadez", "Tuareg", "Iron work", "Silver cross"),
;     (2, "Bandiagara", "Dogon", "Onions/tobacco", "Dogon mask"),
;     (3, "Dinguiraye", "Fulani", "Cattle", "Wedding blanket"),
;     (4, "Dosso", "Songhai-Zarma", "Cotton", "Silver headdress"),
;     (5, "Hemang", "Akan", "Kente cloth", "Gold weight"),
;     (6, "Katsina", "Housa", "Kola nuts", "Holy book"),
;     (7, "Linguère", "Wolof", "Casava/peanut", "Gold necklace"),
;     (8, "Ouagadougou", "Dagbani-Mossi", "Horses", "Bronze bracelet"),
;     (9, "Oudane", "Arab", "Camel", "Bronze incense burner"),
;     (10, "Oyo", "Yoruba", "Ivory", "Ivory bracelet"),
;     (11, "Ségou", "Mande/Bambara", "Millet", "Chiwara"),
;     (12, "Sikasso", "Senoufo", "Brass jewelry", "Kora"),
;     (13, "Tabou", "Kru", "Pepper", "Kru boat"),
;     (14, "Warri", "Idjo", "Palm Oil", "Coral necklace"),
;     (15, "Timbuktu", "Songhai", "Salt", "Gold crown")
; ]
# NOTE: THIS NEEDS TO MATCH CONFIG.PY AND MALI_BA_COMMON.H

[Rules]
# --- ACTION RULES ---
# Determines if creating trade routes is a free action at the end of other actions
# -or- if it's a standalone action like all other actions.
free_action_trade_routes = true

# --- SCORING/VICTORY RULES ---
# Number of active trade routes that will trigger the end game.
end_game_cond_num_routes = -1
;end_game_cond_num_routes = 4
# Number of active trade routes required to BE ABLE to trigger the end game.
end_game_req_numroutes = 2
# Number of unique rare goods that will trigger the end game.
;end_game_cond_num_rare_goods = 6
end_game_cond_num_rare_goods = -1
# Whether the rule is in place that connecting Timbuktu to the coast triggers end game
end_game_cond_timbuktu_to_coast = true
# Whether having a rare good from each region triggers end game
end_game_cond_rare_good_each_region = true
end_game_cond_rare_good_num_regions = 5

# --- COST RULES ---
# The cost to upgrade a trading post to a trading center.
upgrade_cost_common = 3
upgrade_cost_rare = 1
# Remove one meeple when upgrading a trading post (if meeples present)
remove_meeple_on_upgrade = true
# Remove one meeple from each hex when declaring a trade route (if meeples present)
remove_meeple_on_trade_route = true
# How many Trading Posts each player starts with
posts_per_player = 5
# If city_free_upgrade == true, a trading post in a city is automatically upgraded to a center when a trade route is declared.
# If false, a trade route can only be declared between existing trading centers.
city_free_upgrade = false


# --- MECHANIC VARIATIONS (Example) ---
# 'none': no capture
# 'opposite_hex': capture meeples on the hex opposite the last placement (classic Oware rule)
# mancala_capture_rule = none

[Heuristics]
# Base weights for different action types in the AI's heuristic choice.
weight_pass = 0.1
weight_mancala = 10.0
weight_upgrade = 15.0
weight_income = 5.0
weight_place_token = 5.0
# Bonus for any move that also declares a trade route.
weight_trade_route_create = 20.0

bonus_upgrade_new_region = 200
bonus_upgrade_diversity_factor = 100

# Bonus for ending a mancala move in a city.
bonus_mancala_city_end = 200.0
# Bonus for mancala moves that travel a long distance (>3 hexes).
bonus_mancala_long_distance = 200.0
# Bonus for landing on a hex that already has a high density of meeples (>2).
bonus_mancala_meeple_density = 100.0
# Generic bonuses for experimental heuristics.
# bonus1: Applied to the 'Take Income' action if the player has a trading center in a city for which they don't have the rare good yet.
bonus1 = 30.0
# bonus2: Applied to the 'Trade Route Create' appended action if the player has 
# 2 or more trading centers that are not part of trade routes yet.
bonus2 = 50.0
# bonus3: Applied to the 'Upgrade Trading Post to Center' action if the player has fewer than 2 
# trading posts in their supply and the game does not have unlimited trading posts
bonus3 = 20.0
# bonus4: Appled to mancala moves that end with creating a trading post
bonus4 = 15.0

[Training]
# Training reward and penalty parameters for AI learning

# Per-move penalties (applied during gameplay)
time_penalty = -0.002          # Small penalty per move to encourage faster games

# Terminal game penalties
loss_penalty = 0.0              # penalty for losing players (optional)
draw_penalty = 0.0             # Penalty for games that end in draw
max_moves_penalty = -0.5             # Penalty for games that end in timeout

# Intermediate reward values
upgrade_reward = 0.04           # Reward for placing a trading center (upgrade)
trade_route_reward = 0.08       # Reward for creating a trade route
new_rare_region_reward = 0.10   # Reward for acquiring rare goods from new regions
new_common_good_reward = 0.04   # Reward for acquiring new types of common goods
key_location_post_reward = 0.06 # Reward for placing posts at key locations (Timbuktu, Agadez, Oudane, coast)

# Quick win bonuses
quick_win_bonus = 0.2           # Bonus multiplier for games that finish quickly
quick_win_threshold = 150       # Games under this many moves get the quick win bonus

# Usage notes:
# - time_penalty: Applied every move to encourage faster play (negative value)
# - max_moves_penalty: Used in Python training when games hit max length (negative value) 
# - All reward values: Positive numbers encourage these behaviors
# - quick_win_bonus: Multiplier added to winning reward for fast games
# - Adjust these values to tune your AI's learning priorities


[Old-Stuff]
;CityLocations = "9/-4,-1,5:1/4,-4,0:7/-5,2,3:15/0,-1,1:2/0,0,0:11/-2,2,0:4/3,-1,-2:6/4,-1,-3:3/-3,3,0:12/-1,2,-1:8/1,1,-2:10/3,1,-4:13/-2,4,-2:5/1,3,-4:14/4,2,-6:"
# Custom board hexes (optional) - format: x,y,z:x,y,z:...
# If specified, overrides regular board generation
# Uncomment the line below to use a custom board layout:
# custom_hexes = 0,0,0:1,-1,0:-1,1,0:0,1,-1:1,0,-1:-1,0,1:0,-1,1:2,-1,-1:1,1,-2:-1,2,-1:-2,1,1:1,-2,1:-1,-1,2

; City locations: ID/x,y,z : ID/x,y,z
; IDs correspond to kCityDetailsMap in mali_ba_common.h
; *** SEE BELOW FOR CITY INFO AS WELL ***
;CityLocations = "12/-1,1,0:11/0,0,0:10/1,-1,0"
# Format: <city_id>/<location_coords x,y,z>:<city_id>/<location_coords x,y,z>:...

;[BoardConfig]
# Use true for regular uniform hexagonal board, false for custom board
;RegularBoard = true
; If RegularBoard is false, define specific hexes:
# Format: x,y,z:x,y,z:...
; BoardValidHexes = "-4,2,2:-4,3,1:-3,-2,5:-3,-1,4:-3,0,3:-3,1,2:-3,2,1:-3,3,0:-2,-2,4:-2,-1,3:-2,0,2:-2,1,1:-2,2,0:-2,3,-1:-1,-2,3:-1,-1,2:-1,0,1:-1,1,0:-1,2,-1:-1,3,-2:0,-2,2:0,-1,1:0,0,0:0,1,-1:0,2,-2:0,3,-3:1,-2,1:1,-1,0:1,0,-1:1,1,-2:1,2,-3:1,3,-4:2,-4,2:2,-3,1:2,-2,0:2,-1,-1:2,0,-2:2,1,-3:3,-3,0:3,-2,-1:3,-1,-2:3,0,-3"

# Board radius (integer)
;BoardRadius = 3

